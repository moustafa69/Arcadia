// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(uuid())
  name      String
  username  String    @unique
  email     String    @unique
  status    Status    @default(PENDING)
  password  String
  picture   String?
  DOB       DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  //Relations
  favorites FavoriteGame[]

  @@index([email])
}

model Admin {
  id          String        @id @default(uuid())
  name        String
  username    String        @unique
  email       String        @unique
  password    String
  role        Role          @default(MODERATOR)
  permissions Permissions[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  deletedAt   DateTime?

  // Relations
  createdGames      Game[]
  createdGuides     Guide[]
  createdCategories Category[]

  @@index([email])
}

model Game {
  id              String         @id @default(uuid())
  title           String         @unique
  mechanic        String?
  universalPrice  Float?
  platform        String[]
  store           String[]
  playerBaseCount Int?
  netCodeType     String?
  coverPhoto      String?
  timesFavorited  Int            @default(0)
  categoryId      Int
  adminId         String
  updatedAt       DateTime       @updatedAt
  createdAt       DateTime       @default(now())
  deletedAt       DateTime?
  characters      Character[]
  guides          Guide[]
  favoriteBy      FavoriteGame[]

  // Relations
  createdBy Admin    @relation(fields: [adminId], references: [id])
  category  Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@index([title])
  @@index([categoryId])
  @@index([netCodeType])
}

model Category {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime? // TODO: Consider making it a boolean (isDeleted)
  createdById String
  parentId    Int? 

  createdBy     Admin      @relation(fields: [createdById], references: [id], onDelete: Cascade)
  parent        Category?  @relation("FK_Category_Id", fields: [parentId], references: [id], onDelete: Cascade)
  subcategories Category[] @relation("FK_Category_Id") 

  Game Game[]
}

model FavoriteGame {
  id        String    @id @default(uuid())
  userId    String
  gameId    String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  // Relations
  user      User      @relation(fields: [userId], references: [id])
  game      Game      @relation(fields: [gameId], references: [id])

  @@unique([userId, gameId]) // Prevent duplicate favorites
}

model Guide {
  id              String    @id @default(uuid())
  title           String    @unique
  gallery         String[]
  url             String?
  info            String?
  AuthenticAuthor String?
  authorId        String
  gameId          String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  deletedAt       DateTime?
  // Relations
  author          Admin     @relation(fields: [authorId], references: [id])
  Game            Game?     @relation(fields: [gameId], references: [id])
}

model Character {
  id          String    @id @default(uuid())
  name        String
  splashArt   String
  tierList    String
  baseRooster String
  description String?
  archetype   Archetype
  showcase    String?
  photo       String?
  gameId      String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?

  // Relations
  game Game @relation(fields: [gameId], references: [id])
}

enum Archetype {
  ALL_ROUNDER_SHOTO
  MIX_UP
  GRAPPLER
  RUSHDOWN
  ZONER
  POWER
}

enum Role {
  SUPER_ADMIN
  SUB_ADMIN
  MODERATOR
}

enum Permissions {
  MANAGE_ADMINS // for super Admin only
  MANAGE_USERS // for super and sub admins
  MANAGE_GAMES // for super, sub and mods
  MANAGE_GUIDES
}

enum Status {
  PENDING
  ACTIVE
  SUSPENDED
  BLOCKED //kinda using it later!
}
